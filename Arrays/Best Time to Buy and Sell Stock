/****************************
You are given an array prices where prices[i] is the price of a given stock on the ith day.
You want to maximize your profit by choosing a single day to buy one stock and choosing a different day in the future to sell that stock.
Return the maximum profit you can achieve from this transaction. If you cannot achieve any profit, return 0.

Example 1:
Input: prices = [7,1,5,3,6,4]
Output: 5
Explanation: Buy on day 2 (price = 1) and sell on day 5 (price = 6), profit = 6-1 = 5.
Note that buying on day 2 and selling on day 1 is not allowed because you must buy before you sell.

******************************/

/****************CODE*************/
 int maxProfit(vector<int>& prices) {
       int minv=prices[0];
       int ans=0;
        
        for(int i=1;i<prices.size();i++)
        {
            if(prices[i]<minv)
                minv=prices[i];
            else{
                ans=max(ans,prices[i]-minv);
            }
        }
        return ans;
    }
    
    /**************CODE-2************2pointer*********
        int l=0,r=1;
        int ans=0;
        
        while(r<prices.size())
        {
            if(prices[r]<prices[l])
            {
                l=r;
            }
            if(prices[r]-prices[l]>0)
            {
                ans=max(ans,prices[r]-prices[l]);
            }
            r++;
        }
        return ans;
    ********************************************/
