/*********************
You are Given an array A[] of  N Integers and an integer K. You have to choose one element one by one K 
times. You can only pick the element whose frequency is maximum. The element will be removed from the array after being chosen. If there are many elements with the maximum
frequency then you can choose any. Your aim is to maximize the sum.
Your Task:
You don't need to read input or print anything. Your task is to complete the function maximum_sum() which takes the N (number of elements in Array A) ,array A[] and K as input
parameters and returns the maximum sum by choosing K elements.
Example 1:
Input:
N=5 
K=3
A[]={1, 1, 2, 3, 3} 
Output:
7
Explanation:
3+1+3=7
*/

/**********************CODE**************/
long maximum_sum(int n,vector<int>v,int k)
{
   // Your code here
   unordered_map<int,int> mp;
   int i=0;
   for(i=0;i<v.size();i++){
        if(mp.find(v[i])==mp.end()){
            mp[v[i]] = 1;
        }
        else
            mp[v[i]]++;
   }
    priority_queue<pair<int,int>> pq;
    for(auto itr: mp){
        pq.push({itr.second, itr.first});
    }
    long ans = 0;
    for(i=1;i<=k;i++){
        pair<int,int> p = pq.top();
        ans += p.second;
        pq.pop();
        pq.push({p.first-1, p.second});
    }
    return ans;
}
