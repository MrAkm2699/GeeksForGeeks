/***************CODE*********recursive****/
void dfs(vector<int> adj[],bool visit[], int s,vector<int> &vec)
	{
        visit[s]=true;
        vec.push_back(s);
        for(auto x:adj[s])
        {
              if(!visit[x])
                 dfs(adj,visit,x,vec);
        }
    }
        
        vector<int>dfsOfGraph(int V, vector<int> adj[])
        {
        // Code here
        vector<int> vec;
        bool visit[V]={};
        for(int i=0;i<V;i++)
        {
            if(!visit[i])
                dfs(adj,visit,i,vec);
        }
        return vec;
        }
        
    /**********************CODE-2********stack********
    vector<int>dfsOfGraph(int V, vector<int> adj[])
{
      vector<int> res;
      stack<int> tac;
      vector<bool> vis(V, false);
      tac.push(0);
      int curr;
      while(!tac.empty())
      {
      curr = tac.top(); tac.pop();
      if(!vis[curr])
      {
      res.push_back(curr);
      vis[curr] = true;
      for(int i = adj[curr].size() - 1; i >= 0; i--)
      if(!vis[adj[curr][i]])
      tac.push(adj[curr][i]);
      }
      }
      return res;
}
    */
    
    
    
	
