/*************
Given a string of lowercase alphabets, count all possible substrings (not necessarily distinct) that have exactly k distinct characters. 
Example 1:
Input:
S = "aba", K = 2
Output:
3
Explanation:
The substrings are:
"ab", "ba" and "aba".

Example 2:
Input: 
S = "abaaca", K = 1
Output:
7
Explanation:
The substrings are:
"a", "b", "a", "aa", "a", "c", "a". 

**************/

/******************CODE**************/
long long int substrCount (string s, int k) {
    	//code here.
    	int count[26]={};
    	int n=s.length();
    	int ans=0;
    	
    	for(int i=0;i<n;i++)
    	{
    	    int c=0;
    	    memset(count, 0, sizeof(count));
    	    for(int j=i;j<n;j++)
    	    {
    	        if(count[s[j]-'a']==0)
    	            c++;
    	            
    	       count[s[j]-'a']++;
    	       
    	       if(c==k)
    	        ans++;
    	    }
    	}
    	
    	return ans;
    }
    
    /***************CODE-2*****sliding window*********
    long long int atmost (string s, int k) {
//code here.
if(s.size()==0 || k==0) return 0;
long long int c=0,ans=0,i=0,j=0,n=s.size();
int f[26]={0};
while(j<n){ f[s[j]-'a']++;="" if(f[s[j]-'a']="=1)c++;" while(i<="j" &&="" c="">k){
f[s[i]-'a']--;
if(f[s[i]-'a']==0)c--;
i++;
}
ans+=(j-i+1);
j++;
}
return ans;
}
long long int substrCount (string s, int k) {
//code here.
return atmost(s,k)-atmost(s,k-1);
}
    
    ************************************/
