/************each partition od a string or substring is a plaindrome*******
Given a string str, a partitioning of the string is a palindrome partitioning if every sub-string of the partition
is a palindrome. Determine the fewest cuts needed for palindrome partitioning of given string.
Example 1:
Input: str = "ababbbabbababa"
Output: 3
Explaination: After 3 partitioning substrings 
are "a", "babbbab", "b", "ababa".
*/
/********************CODE****MCM variation*************/
int t[500][500];
int isPallindrome(string s,int i,int j){
    if(i==j)
        return 1;
    if(i>j)
        return 1;
    while(i<=j){
        if(s[i]!=s[j])
            return 0;
        i++;
        j--;
    }
    return 1;
}
int solve(string str,int i,int j)
{
    if(t[i][j]!=-1)
        return t[i][j];
    if(i>=j)
        return 0;
    if(isPallindrome(str,i,j))
        return 0;
        
    int ans = INT_MAX,temp;
    //Loop from i to j-1 because if string is of n then # of partitons could be n-1 only.
    for(int k=i;k<j;k++)
    {
        if(isPallindrome(str,i,k))
        {
            temp = 1+solve(str,k+1,j);
            ans = min(ans,temp);
        }
    }
    return t[i][j] = ans;
}
class Solution{
public:
int palindromicPartition(string str){
    memset(t,-1,sizeof(t));
    return solve(str,0,str.length()-1);
}
