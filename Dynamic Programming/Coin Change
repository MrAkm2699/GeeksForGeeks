*****************COIN CHANGE->MAX WAYS POSSIBLE FROM INFINTE SUPPLY (UNBOUNDED KNAPSACK)

Given a value N, find the number of ways to make change for N cents, if we have infinite supply of each of S = { S1, S2, .. , SM } valued coins. 

Example 1:

Input:
n = 4 , m = 3
S[] = {1,2,3}
Output: 4
Explanation: Four Possible ways are:
{1,1,1,1},{1,1,2},{2,2},{1,3}.

â€‹Example 2:

Input:
n = 10 , m = 4
S[] ={2,5,3,6}
Output: 5
Explanation: Five Possible ways are:
{2,2,2,2,2}, {2,2,3,3}, {2,2,6}, {2,3,5} 
and {5,5}.

*****************CODE*****************
 long long int count( int S[], int m, int n )
    {
        long long int a[m+1][n+1];
        memset(a,0,sizeof(a));
        
        //------below is initialization---------
               
        for(int i=0;i<m+1;i++)
        for(int j=0;j<n+1;j++)
        {
            if(j==0)
                a[i][j]=1;
        }
        
       for(int i=1; i<=m;i++)
       {
           for(int j=1; j<=n; j++)
           {
               if(S[i-1]<=j)                    //value of coin(S[i]) less than weight/total
               {
                   a[i][j]= a[i-1][j] + a[i][j-S[i-1]];
               }
               else{                            //value of coin(S[i]) is greater than total/weight
                   a[i][j] = a[i-1][j];
               }
           }
       }
       return a[m][n];
        //code here.
    }
