*****************EDIT DISATNCE (2 STRING MATCHED MIN OPERATIONS)*******************
Given two strings s and t. Find the minimum number of operations that need to be performed on str1 to convert it to str2. The possible operations are:

Insert
Remove
Replace
 

Example 1:

Input: 
s = "geek", t = "gesek"
Output: 1
Explanation: One operation is required 
inserting 's' between two 'e's of str1.
Example 2:

Input : 
s = "gfg", t = "gfg"
Output: 
0
Explanation: Both strings are same.

***********************CODE(TABULATION/BOTTOM-UP)***************

int editDistance(string s, string t) 
    {
        int n=edit(s,t);
        return n;
    }
    
     int edit(string s, string t)
        {
            int l1=s.length();
            int l2=t.length();
            
            int dp[101][101];
            
            for(int i=0;i<l1+1;i++){
                for(int j=0;j<l2+1;j++){
                 if(i==0)
                    dp[i][j]=j;
                else if(j==0)
                    dp[i][j]=i;
                }
            }
            
            for(int i=1;i<l1+1;i++){
                for(int j=1;j<l2+1;j++){
                    
                    if(s[i-1] == t[j-1])
                        dp[i][j]= dp[i-1][j-1];
                        else{
                            dp[i][j]=  1 + min(dp[i-1][j-1] ,min(dp[i-1][j],dp[i][j-1]));
                        }
                }
            }
            return dp[l1][l2];
        }
        
***********************CODE(MEMOIZED/TOP-DOWN)************

int dp[101][101];
int ls(string s, string t, int i , int j) {
if (i == 0) return j;
if (j == 0) return i;
if (dp[i][j] != -1)
return dp[i][j];

if (s[i - 1] == t[j - 1])
return dp[i][j] = ls(s, t, i - 1, j - 1);
int op1 = ls(s, t, i - 1, j);
int op2 = ls(s, t, i, j - 1);
int op3 = ls(s, t, i - 1, j - 1);
return dp[i][j] = min(op1, min(op2, op3)) + 1;
}
int editDistance(string s, string t) {
memset(dp, -1, sizeof(dp));

return ls(s, t, s.size(), t.size());
}
