***************PARTITION EQUAL SUBSET SUM*************(uses code os subset sum)(impemented by both recursive and memoized)
Given an array arr[] of size N, check if it can be partitioned into two parts such that the sum of elements in both parts is the same.

Example 1:

Input: N = 4
arr = {1, 5, 11, 5}
Output: YES
Explaination: 
The two parts are {1, 5, 5} and {11}.
Example 2:

Input: N = 3
arr = {1, 3, 5}
Output: NO
Explaination: This array can never be 
partitioned into two such parts.

***************CODE(BOTTOM-UP/TOP-DOWN)**************(U MADE A MISTAKE IN ABOVE QUESTIONS------->SOLVED USING 2D MATRIX IS NOT MEMOIZED ITS BOTTOM-UP/TOP-DOWN)

bool partitionSum(int arr[],int N, int sum){
    int a[101][101];
    for(int i=0; i<N+1; i++)
        for(int j=0; j<sum+1; j++)
        {
            if(i==0)
                a[i][j]=0;
            if(j==0)
                a[i][j]=1;
        }
            
    
    for(int i=1;i<N+1;i++)
    {
        for(int j=1;j<sum+1;j++)
        {
            if(arr[i-1]<=j)
            {
                a[i][j]= a[i-1][j-arr[i-1]] || a[i-1][j];
            }
            else {
                a[i][j]=a[i-1][j];
            }
        }
    }
    return a[N][sum]; 
}
class Solution{
public:
    int equalPartition(int N, int arr[])
    {
        // code here
        int sum=0;
        for(int i=0;i<N;i++){
            sum+=arr[i];
        }
        if(sum%2!=0){
            return 0;
        }
        else 
        {
            if(partitionSum(arr,N,sum/2))
                    return 1;
            else return 0;
        }
        
    }
};

************CODE(RECURSIVE)***********
int subsetSum(int arr[], int n, int sum) {
if(sum == 0)
return 1;
else if(n == 0 || sum < 0)
return 0;

return subsetSum(arr, n-1, sum - arr[n-1]) || subsetSum(arr, n-1, sum);
}

class Solution{
public:
    int equalPartition(int N, int arr[])
{
int sum = 0;
for(int i = 0; i < N; i++)
sum += arr[i];
if(sum % 2 != 0)                             // odd number cannot have equal partition
return 0;
else
return subsetSum(arr, N, sum/2);
}
};


***************CODE(MEMOIZED)**************(U MADE A MISTAKE IN ABOVE QUESTIONS------->SOLVED USING 2D MATRIX IS NOT MEMOIZED ITS BOTTOM-UP/TOP-DOWN)
bool go(int arr[],int n,int target,vector<vector<int>>& dp){

if(target==0)
 return true;

if(n==0) 
return false;

if(dp[n][target]!=-1) 
return dp[n][target];

if(arr[n-1]<=target)
return       dp[n][target]      =     (go(arr,n-1,target-arr[n-1],dp)     ||        go(arr,n-1,target,dp));
else
return     dp[n][target]=        go(arr,n-1,target,dp);

}

int equalPartition(int N, int arr[])
{
int sum=0;
for(int i=0;i<n;i++) sum+="arr[i];" if(sum="" &="" 1)="" return="" 0;="" int="" target="sum/2;" vector<vector<int="">> dp(N+1,vector<int>(target+1,-1));//GFG COPIED FOR REFERENCE

return go(arr,N,target,dp);

}
