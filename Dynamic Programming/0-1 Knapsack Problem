****************0 - 1 Knapsack Problem **************

You are given weights and values of N items, put these items in a knapsack of capacity W to get the maximum total value in the knapsack. Note that we have only one quantity of each item.
In other words, given two integer arrays val[0..N-1] and wt[0..N-1] which represent values and weights associated with N items respectively. Also given an integer W which represents knapsack capacity, find out the maximum value subset of val[] such that sum of the weights of this subset is smaller than or equal to W. You cannot break an item, either pick the complete item, or donâ€™t pick it (0-1 property).

Example 1:

Input:
N = 3
W = 4
values[] = {1,2,3}
weight[] = {4,5,1}
Output: 3
Example 2:

Input:
N = 3
W = 3
values[] = {1,2,3}
weight[] = {4,5,6}
Output: 0

**********CODE*********
class Solution
{
    public:
    //Function to return max value that can be put in knapsack of capacity W.
    int knapSack(int W, int wt[], int val[], int n) 
    { 
       // Your code here
       //sort(wt,wt+n);
       int t[n+1][W+1];
       memset(t,0,sizeof(t));       //FOR 0TH ROWS AND COLUMNS VALUES WILL BE ZERO
       
       for(int i=1;i<=n;i++)
       {
           for(int j=1;j<=W;j++)
           {
               if(wt[i-1]>j)
                t[i][j]=t[i-1][j];
                
                else{
                    t[i][j]= max(t[i-1][j], val[i-1] + t[i-1][j-wt[i-1]]);  //GET THE MAX FROM [ SAME WEIGHT PREVIOUS ROW INDEX VALUE, 
                                                                                                CURRENT VALUE OF WEIGHT + REMAINING WEIGHT AFTER SUBTRACTING CURRENT WEIGHT(FROM PREV ROW INDEX)]
                }
           }
       }
       return t[n][W];
    }
};
