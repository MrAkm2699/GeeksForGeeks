****************gold mine(max element from rows connected in columns)***************
Given a gold mine called M of (n x m) dimensions. Each field in this mine contains a positive integer which is the amount of gold in tons. Initially the miner can start from any row in the first column. From a given cell, the miner can move

to the cell diagonally up towards the right 
to the right
to the cell diagonally down towards the right
Find out maximum amount of gold which he can collect.


Example 1:

Input: n = 3, m = 3
M = {{1, 3, 3},
     {2, 1, 4},
     {0, 6, 4}};
Output: 12
Explaination: 
The path is {(1,0) -> (2,1) -> (2,2)}.

Example 2:

Input: n = 4, m = 4
M = {{1, 3, 1, 5},
     {2, 2, 4, 1},
     {5, 0, 2, 3},
     {0, 6, 1, 2}};
Output: 16
Explaination: 
The path is {(2,0) -> (3,1) -> (2,2) 
-> (2,3)} or {(2,0) -> (1,1) -> (1,2) 
-> (0,3)}.

**************CODE(RECURSION+MATRIX)(MEMOIZATION)**********************
class Solution{
public:
int mem[52][52];
int calcMaxGold(int x, int y, int n, int m , vector<vector<int> > &M){
if(x >= n || y >= m || x<0)return 0;
if(y == m-1 )return M[x][y];
if(mem[x][y] != -1)return mem[x][y];

mem[x][y] = M[x][y]+max(calcMaxGold(x-1,y+1,n,m,M),max(calcMaxGold(x,y+1,n,m,M), calcMaxGold(x+1,y+1,n,m,M)));

return mem[x][y];
}
int maxGold(int n, int m, vector<vector<int>> M)
{
// code here
memset(mem, -1, sizeof(mem[0][0])*52*52);
int ans = -1;
for(int i = 0; i < n; i++){
int mx = calcMaxGold(i,0,n,m,M);
if(mx > ans)ans=mx;
}
return ans;

}
};


////////////////*********matrix method*************/////////(seg error)logics right
    int maxGold(int n, int m, vector<vector<int>> &M)
    {
        //int t[n+1][m+1]={0};
        for(int i=m-2;i>=0;i--){
            for(int j=0;i<n;j++)
            {
                int right = M[j][i+1];
                int dup = (j==0) ? 0 : M[j-1][i+1];
                int ddown = (j==n-1)? 0 : M[j+1][i+1];
                
                M[j][i]= M[j][i] + max ( right, max(dup,ddown) );
            }
        }
     int ans=0;
    for(int i=0;i<n;i++)
    {
        ans=max(ans,M[i][0]);
    }
    return ans;
    }
    
