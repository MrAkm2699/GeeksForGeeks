/****************ADDING 2 NUMBERS REPRESENTED BY LIST**************/
Given two numbers represented by two linked lists of size N and M. The task is to return a sum list. The sum list is a linked list representation of the addition of two input numbers from the last.

Example 1:

Input:
N = 2
valueN[] = {4,5}
M = 3
valueM[] = {3,4,5}
Output: 3 9 0  
Explanation: For the given two linked
list (4 5) and (3 4 5), after adding
the two linked list resultant linked
list will be (3 9 0).

/********************code-1*********NOt all cases*****/
struct Node* addTwoLists(struct Node* first, struct Node* second)
    {
        long long n1=0;
        long long n2=0;
        Node *t1=first;
        Node *t2=second;
        
        if(first==NULL)
            return second;
        if(second==NULL)
            return first;
            
        while(t1)
        {
            n1=n1*10 + t1->data;
            t1=t1->next;
        }
        while(t2)
        {
            n2= (n2*10) + (t2->data);
            t2=t2->next;
        }
        long long ans=n1+n2;
        //cout<<ans<<" <- "<<endl;
        first=NULL;
        while(ans!=0)
        {
            int rem=ans%10;
            ans=ans/10;
            //cout<<rem<<" ";
            Node* t=new Node(rem);
            t->next=NULL;
            //t->data=rem;
            if(first==NULL){
                first=t;
            }
            else{
                t->next=first;
                first=t;
            }
            
        }
        
        return first;
        
    }
    
    /*********************************CODE-2**********reverse both LL*****Then consider 0 if any left********add the digit while storing total in new LL and keep carry for further digits******/
    
    Node* reverse(Node *head)
{
    Node *curr = head;
    Node *next = NULL;
    Node *prev = NULL;
    
    while(curr)
    {
        next = curr->next;
        curr->next = prev;
        prev = curr;
        curr = next;
    }
    head = prev;
    return head;
}
void addBack(Node *&head, Node *&last, int data){
   
   Node *newNode=new Node(data);
//   newNode->data=data;
   newNode->next=NULL;
   
   if(last==NULL){
       head=newNode;
   }
   else{
       last->next=newNode;
   }
   last=newNode;
   
}
Node*  addTwoLists(Node* first, Node* second){
    
  Node *head1=reverse(first);
  Node *head2=reverse(second);
  Node *res;
  Node *last=NULL; // Last node of new list
  int total,carry=0;
  // One of them not NULL
  while(head1|| head2){
      
      int a=(head1)?(head1->data):(0); // If NULL contri is 0
      int b=(head2)?(head2->data):(0);
      
      total=(a+b+carry);
      carry=(total/10);
      total=total%10;
      
      // Add this to back of new list
      addBack(res,last,total);
      
      if(head1){
          head1=head1->next;
      }
      
      if(head2){
           head2=head2->next;
      }
  }
  if(carry!=0){
      addBack(res,last,carry);
  }
  res = reverse(res);
  return res;
}
