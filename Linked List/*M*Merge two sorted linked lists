/*****************
Given two sorted linked lists consisting of N and M nodes respectively. The task is to merge both of the list (in-place) and return head of the merged list.

Example 1:
Input:
N = 4, M = 3 
valueN[] = {5,10,15,40}
valueM[] = {2,3,20}
Output: 2 3 5 10 15 20 40
Explanation: After merging the two linked
lists, we have merged list as 2, 3, 5, 10, 15, 20, 40.

Example 2:
Input:
N = 2, M = 2
valueN[] = {1,1}
valueM[] = {2,4}
Output:1 1 2 4
******************/

/******************CODE-1******************/
Node* sortedMerge(Node* head1, Node* head2)  
{  
    // code here
    Node*ans=NULL;
    Node*resHead=NULL;
    ans=(Node*)malloc(sizeof(Node*));               //This IDEA wont click
    resHead=ans;
    
    if(!head1)
        return head2;
    if(!head2)
        return head1;
    
    while(head1 and head2)
    {
        if(head1->data <= head2->data)
            {
                resHead->next=head1;
                head1=head1->next;
            }
        else{
                resHead->next=head2;
                head2=head2->next;
        }
        resHead=resHead->next;
        if(head1!=NULL)
        {
            resHead->next=head1;
        }
        if(head2!=NULL)
        {
            resHead->next=head2;
        }
    }
    return ans->next;
}  

/**********************
Node* sortedMerge(Node* l1, Node* l2)  
{  
    if(l1==NULL)return l2;
if(l2==NULL)return l1;

if(l1->data<l2->data){
l1->next=sortedMerge(l1->next,l2);
return l1;
}
else{
l2->next=sortedMerge(l1,l2->next);
return l2;
}
}

***************/
