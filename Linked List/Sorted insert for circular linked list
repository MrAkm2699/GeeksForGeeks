/************************************************************/

Given a sorted circular linked list, the task is to insert a new node in this circular list so that it remains a sorted circular linked list.
Example 1:
Input:
LinkedList = 1->2->4
(the first and last node is connected,
i.e. 4 --> 1)
data = 2
Output: 1 2 2 4
Example 2:
Input:
LinkedList = 1->4->7->9
(the first and last node is connected,
i.e. 9 --> 1)
data = 5
Output: 1 4 5 7 9

/*************************CODE-1****************************/
Node *sortedInsert(Node* head, int data)
    {
       Node* temp=head;
       Node* val =new Node(data);
       val->data=data;
       
       if(head==NULL)
        {
            head=val;
            val->next=val;    //circular LL
            return head;
        }
        
      if(temp->data > data)      //Insertion at beg
      {
        Node* curr=head;
        
        while(temp->next!=head)
        {
            temp=temp->next;
        }
        temp->next=val;
        val->next=head;
        return val;
      }
       else               //Rest of the cases
       {
            while(temp!=NULL)
       {
           if((temp->data <= data && temp->next->data > data) || 
              (temp->data <= data && temp->next->data < temp->data))
           {
               val->next=temp->next;
               temp->next=val;
               break;
           }
           temp=temp->next;
       }
       return head;    
       }
       
    }
