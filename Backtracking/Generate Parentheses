/************
Given an integer N representing the number of pairs of parentheses, the task is to generate all combinations of well-formed(balanced) parentheses.
Example 1:
Input:
N = 3
Output:
((()))
(()())
(())()
()(())
()()()
Example 2:
Input:
N = 1
Output:
()
************/

/***************CODE************/
void solve(int open,int close,int n, string s, vector<string>&ans)
    {
        if(s.length()==2*n)
            {
                ans.push_back(s);
                return;
            }
        if(open<n)
        {
            solve(open+1,close,n, s+'(', ans);    
        }
        if(close<open)
        {
            solve(open,close+1,n, s+')', ans);    
        }
            
    }
    vector<string> AllParenthesis(int n) 
    {
        // Your code goes here 
        vector<string>ans;
        solve(0,0,n,"",ans);
        return ans;
    }
