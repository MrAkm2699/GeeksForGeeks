/******************************
Given a Binary Tree of size N, find all the nodes which don't have any sibling. Root node can not have a sibling.

Example 1:
Input :
       37
      /   
    20
    /     
  113 

Output: 20 113
Explanation: 20 and 113 dont have any siblings.

Example 2:
Input :
       1
      / \
     2   3 

Output: -1
Explanation: Every node has a sibling.
*********************************/


/***************************CODE********************/
void solve(Node*root,vector<int>&ans)
{
    if(root==NULL)
        return;
    solve(root->left,ans);
    
    if(root->left and !root->right)
        ans.push_back(root->left->data);
    if(!root->left and root->right)
        ans.push_back(root->right->data);
        
    solve(root->right,ans);
}

vector<int> noSibling(Node* node)
{
    // code here
    vector<int>ans;
    solve(node,ans);
    if(ans.size()==0)
        return {-1};
    sort(ans.begin(),ans.end());
    return ans;
}
