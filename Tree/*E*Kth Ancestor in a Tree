/******
Input:
k=1 
node=3
      1
    /   \
    2     3

Output:
1
Explanation:
K=1 and node=3 ,Kth ancestor of node 3 is 1.


        1
       /  \
      2    3
     /  \
    4    5
Input:
     K = 2
     Node = 4
Output: 1
Explanation:
Since, K is 2 and node is 4, so we
first need to locate the node and
look k times its ancestors.
Here in this Case node 4 has 1 as his
2nd Ancestor aka the Root of the tree.
*/

/***************CODE************/

void fun(Node* root, int node, int& k , int& check, int& ans)
{
        if(root==NULL)
        return;
        
        if(root->data== node)
        {
            check=1;
            return;
        }
        
        fun(root->left, node, k, check, ans);
        if(check==0)
        fun(root->right, node, k, check, ans);
        
        if(check==1)
        {
            k--;
            if(k==0)
            ans=root->data;
        }
}

int kthAncestor(Node *root, int k, int node)
{
         int check=0,   ans=-1;
         fun(root, node, k, check, ans);
         return ans;
}
